[1,["88YYn4keFHq7PYjQ7iXwpZ"],["_effectAsset"],[["cc.Material",["_name","_techniqueData"],2,11],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2],[1,0,1,2,4]],[[[[0,"miaobian",[{},"0",11,[{"defines":{"USE_TINT":false}},"props",11,[{},"borderColor",8,[4,1090519039]]]]]],0,0,[0],[0],[0]],[[[1,"shieldEffect",[{"hash":2473171219,"record":null,"name":"shieldEffect|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\n#if USE_TINT\n  in vec4 a_color0;\n#endif\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec4 v_light;\n#if USE_TINT\n  out vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform sampler2D texture;\nin vec2 v_uv0;\nuniform c {\n  vec4 borderColor;\n  vec4 bordSize;\n};\nin vec4 v_light;\n#if USE_TINT\n  in vec4 v_dark;\n#endif\nfloat getBordAlpha(){\n    vec2 uv = v_uv0;\n    float a = 0.0;\n    vec4 c = vec4(1,1,1,1);\n    for (float i = 0.0; i < 6.2832; i += 0.17453) {\n      uv.x = v_uv0.x + sin(i) * bordSize.x;\n      uv.y = v_uv0.y + cos(i) * bordSize.y;\n        c = texture(texture, uv);\n        a += c.a;\n    }\n    a /= 36.0;\n    return a;\n}\nvoid main () {\n  vec4 o = vec4(1.0);\n    o = texture(texture,v_uv0);\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * o.a;\n    finalColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * v_light.rgb;\n  #else\n    finalColor = o * v_light;\n  #endif\n  if(bordSize.z == 1.0 && finalColor.a <= 0.9){\n    float a = getBordAlpha();\n    finalColor = borderColor * a * 2.0;\n  }\n  gl_FragColor = finalColor;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\n#if USE_TINT\n  attribute vec4 a_color0;\n#endif\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nvoid main () {\n  mat4 mvp;\n  #if CC_USE_MODEL\n    mvp = cc_matViewProj * cc_matWorld;\n  #else\n    mvp = cc_matViewProj;\n  #endif\n  v_uv0 = a_uv0;\n  v_light = a_color;\n  #if USE_TINT\n    v_dark = a_color0;\n  #endif\n  gl_Position = mvp * vec4(a_position, 1);\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform sampler2D texture;\nvarying vec2 v_uv0;\nuniform vec4 borderColor;\nuniform vec4 bordSize;\nvarying vec4 v_light;\n#if USE_TINT\n  varying vec4 v_dark;\n#endif\nfloat getBordAlpha(){\n    vec2 uv = v_uv0;\n    float a = 0.0;\n    vec4 c = vec4(1,1,1,1);\n    for (float i = 0.0; i < 6.2832; i += 0.17453) {\n      uv.x = v_uv0.x + sin(i) * bordSize.x;\n      uv.y = v_uv0.y + cos(i) * bordSize.y;\n        c = texture2D(texture, uv);\n        a += c.a;\n    }\n    a /= 36.0;\n    return a;\n}\nvoid main () {\n  vec4 o = vec4(1.0);\n    o = texture2D(texture,v_uv0);\n  vec4 finalColor;\n  #if USE_TINT\n    finalColor.a = v_light.a * o.a;\n    finalColor.rgb = ((o.a - 1.0) * v_dark.a + 1.0 - o.rgb) * v_dark.rgb + o.rgb * v_light.rgb;\n  #else\n    finalColor = o * v_light;\n  #endif\n  if(bordSize.z == 1.0 && finalColor.a <= 0.9){\n    float a = getBordAlpha();\n    finalColor = borderColor * a * 2.0;\n  }\n  gl_FragColor = finalColor;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TINT","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"c","binding":1,"members":[{"name":"borderColor","type":16,"count":1},{"name":"bordSize","type":16,"count":1}],"defines":[]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":[]}]}],[{"passes":[{"program":"shieldEffect|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]},"borderColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"bordSize":{"type":16,"value":[0.1,0.1,1,1]}}}]}]]],0,0,[],[],[]]]]